{
  "author": {
    "name": "Morten Siebuhr",
    "email": "sbhr@sbhr.dk",
    "url": "http://sbhr.dk"
  },
  "name": "check",
  "description": "Check configurations completeness",
  "version": "0.0.3",
  "homepage": "http://github.com/msiebuhr/node-check/",
  "repository": {
    "type": "git",
    "url": "http://github.com/msiebuhr/node-check/"
  },
  "main": "lib/index.js",
  "dependencies": {},
  "devDependencies": {
    "vows": "*"
  },
  "scripts": {
    "prepublish": "vows",
    "test": "vows"
  },
  "readme": "node-check\n==========\n\nConfiguration checker.\n\n[![Build Status](https://secure.travis-ci.org/msiebuhr/node-check.png?branch=master)](http://travis-ci.org/msiebuhr/node-check)\n\nInstall\n-------\n\n    npm install check\n\n(Or clone the repo.)\n\nUsage\n-----\n\n    var check = require('check');\n\n\tvar config = {\n\t    database: {hostname: 'example.com', debug: false},\n\t\tsomeOtherSetting: 'bar'\n\t};\n\n\tcheck(config)\n\t\t.has('database.hostname') // Implicitly checks 'database'\n\t\t.isBoolean('database.debug')\n\t\t.has('missingSetting')   // Missing key - this will make check fail.\n\t\t.assert();               // Assert if anything isn't as required.\n\nWill produce an error not entirely unlike this:\n\n    AssertionError: Incorrect configuration:\n\t    Missing key 'missingSetting'.\n\tat functionA (/your/source/code/a.js:line:col)\n\tat functionB (/your/source/code/b.js:line:col)\n\t...\n\tat EventEmitter._tickCallback (node.js:190:38)\n\nAPI\n===\n\nInitialization\n--------------\n\n    check(object-literal)\n\nReturns an chainable object whereon the following functions can be used.\n\n.has(key)\n---------\n\nTests if the given key is present. This also works with dot-notation, so\n`has('foo.bar')` will check if `foo` exists and then if `foo` has a `bar`-thing\nstuck on.\n\n.isArguments(key)\n-----------------\n.isArray(key)\n-------------\n.isBoolean(key)\n---------------\n.isDate(key)\n------------\n.isDirectory(key)\n-----------------\n.isFile(key)\n------------\n.isFunction(key)\n----------------\n.isNumber(key)\n--------------\n.isObject(key)\n--------------\n.isRegExp(key)\n--------------\n.isSocket(key)\n--------------\n.isString(key)\n--------------\n.isSymbolicLink(key)\n--------------------\n\nFirst checks if the key is present (as if running `.has(key)`), and if the\ngiven key is the right type.\n\n.assert()\n---------\n\nStops the chaining and `assert()` if any keys were missing.\n\n.ok()\n-----\n\nStops the chaining and returns if any errors were found.\n\n.errors()\n---------\n\nStops the chaining and returns a list of errors (if any).\n\nBugs\n====\n\nPlenty! Report them! And add ideas for great features.\n\nLicense\n=======\n\nISC; see [LICENSE](https://github.com/msiebuhr/node-check/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "check@0.0.3",
  "dist": {
    "shasum": "316c072c98678cee200d18bba89935cc8696fa0e"
  },
  "_from": "check@",
  "_resolved": "https://registry.npmjs.org/check/-/check-0.0.3.tgz"
}
